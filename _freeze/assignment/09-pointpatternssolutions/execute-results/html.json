{
  "hash": "77c424a2cd4ab6f7855e2d40e7803f3e",
  "result": {
    "markdown": "---\ntitle: \"Assignment 9 Solutions: Fitting models to your dataframe\"\n---\n\n\n<span style=\"color:#9F281A;\">1. Use the variables that you chose from assignment 6 along with the wildfire hazard and land use dataset to attribute each disaster in the disaster dataset.</span>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(tidyverse, quietly = TRUE)\nlibrary(terra)\nlibrary(tmap, quietly = TRUE)\nlibrary(caret)\n\n download_unzip_read <- function(link){\n  tmp <- tempfile()\n  download.file(link, tmp)\n  tmp2 <- tempfile()\n  unzip(zipfile=tmp, exdir=tmp2)\n  shapefile.sf <- read_sf(tmp2)\n  }\n\n\ncejst.pnw <- read_sf(\"data/opt/data/2023/assignment07/cejst_pnw.shp\")%>% \n  filter(., !st_is_empty(.))\n\nincidents.csv <- read_csv(\"data/opt/data/2023/assignment07/ics209-plus-wf_incidents_1999to2020.csv\")\n\nland.use <- rast(\"data/opt/data/2023/assignment07/land_use_pnw.tif\")\nfire.haz <- rast(\"data/opt/data/2023/assignment07/wildfire_hazard_agg.tif\")\n\n\nfire.haz.proj <- project(fire.haz, land.use)\n\n\ncejst.proj <- cejst.pnw %>% \n  st_transform(., crs=crs(land.use))\n\nincidents.proj <- incidents.csv %>% \n  filter(., !is.na(POO_LONGITUDE) | !is.na(POO_LATITUDE) ) %>% \n  st_as_sf(., coords = c(\"POO_LONGITUDE\", \"POO_LATITUDE\"), crs= 4269) %>% \n  st_transform(., crs=crs(land.use))\nincidents.pnw <- st_crop(incidents.proj, st_bbox(cejst.proj))\n\nhazard.smooth <- focal(fire.haz.proj, w=5, fun=\"mean\")\nland.use.smooth <- focal(land.use, w=5, fun=\"modal\")\nlevels(land.use.smooth) <- levels(land.use)\n\ncejst.select <- cejst.proj %>% \n  select(., c(TPF, HBF_PFS, P200_I_PFS))\n\nincident.cejst <- incidents.pnw %>% \n  st_join(., y=cejst.select, join=st_within) \n\nincident.landuse.ext <- terra::extract(x=land.use.smooth, y = vect(incident.cejst), fun=\"modal\", na.rm=TRUE)\n\nincident.firehaz.ext <- terra::extract(x= hazard.smooth, y = vect(incident.cejst), fun=\"mean\", na.rm=TRUE)\n\nincident.cejst.join <- cbind(incident.cejst,incident.landuse.ext$category, incident.firehaz.ext$focal_mean) %>% \n  rename(category = \"incident.landuse.ext.category\", hazard = \"incident.firehaz.ext.focal_mean\")\n\nincident.cejst.model <- incident.cejst.join %>% \n  select(., PROJECTED_FINAL_IM_COST, TPF, HBF_PFS, P200_I_PFS, hazard, category,) %>% \n  st_drop_geometry(.) %>% \n  filter(., complete.cases(.)) %>% \n  mutate(across(TPF:hazard, ~ scale(.x)),\n         category = as.character(category),\n         cost = as.integer(floor(PROJECTED_FINAL_IM_COST))) %>% \n  select(-PROJECTED_FINAL_IM_COST)\n```\n:::\n\n\n\n<span style=\"color:#9F281A;\">2. Fit a Poisson regression using your covariates and the cost of the incident data (using `glm` with `family=poisson()`)</span>\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(998)\ninTraining <- createDataPartition(incident.cejst.model$category, p = .75, list = FALSE)\ntraining <- incident.cejst.model[ inTraining,]\ntesting  <- incident.cejst.model[-inTraining,]\n\nfitControl <- trainControl(## 10-fold CV\n                           method = \"repeatedcv\",\n                           number = 10,\n                           ## repeated ten times\n                           repeats = 10)\n\nPoisFit <- train( cost ~ ., data = training, \n                 method = \"glm\", \n                 family = poisson,\n                 trControl = fitControl\n                 )\n```\n:::\n\n\n\n<span style=\"color:#9F281A;\">3. Fit a regression tree using your covariates and the cost of the incident data (using `caret` package `method=`rpart`)</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRtFit <- train( cost ~ ., data = training, \n                 method = \"rpart\",\n                  parms=list(method=\"poisson\"),\n                 trControl = fitControl\n                 )\n```\n:::\n\n\n<span style=\"color:#9F281A;\">4. Fit a random forest model using your covariates and the cost of the incident data (using `caret` package `method= 'rf'`)</span>\n\n::: {.cell}\n\n```{.r .cell-code}\nRFFit <- train( cost ~ ., data = training, \n                 method = \"rf\",\n                 trControl = fitControl\n                 )\n```\n:::\n\n\n\n<span style=\"color:#9F281A;\">5. Use cross-validation to identify the best performing model of the 3 that you fit</span>\n\n<span style=\"color:#9F281A;\">6. Convert all of your predictors into rasters of the same resolution and generate a spatial prediction based on your model</span>\n\n<span style=\"color:#9F281A;\">7. Plot your result</span>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}