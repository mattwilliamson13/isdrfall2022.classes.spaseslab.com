{
  "hash": "be1b727e9a1ea08c6d594c9c1a19905a",
  "result": {
    "markdown": "---\ntitle: \"Coordinates and Geometries\"\nsubtitle: \"HES 505 Fall 2023: Session 7\"\nauthor: \"Matt Williamson\"\nformat: \n  revealjs:\n    theme: mytheme.scss\n    slide-number: true\n    show-slide-number: print\n    self-contained: true  \n---\n\n\n# Today's Plan {background-image=\"img/slide_7/mining_idaho.jpeg\" background-opacity=\"0.7\"}\n\n::: footer\nImage Source: Wikimedia Commons\n:::\n\n## Objectives\n\n- Understand the linkage between location, coordinates, coordinate reference systems, and geometry\n\n- Access and manipulate geometries in `R` with `sf` (and `terra`)\n\n- Define `geometry` in the context of vector objects and troubleshoot common problems\n\n- Change the CRS for vectors and rasters (and understand the implications)\n\n# But first... {background=\"#9F281A\"}\n\n## Getting more acquainted with `R`\n\n- Objects, classes, functions, oh my... \n\n- Intuition for the [`tidyverse`](https://jhudatascience.org/tidyversecourse/intro.html) \n- Getting used to pipes (` %>% ` or `|>`)\n\n- Learning to prototype\n\n# Getting help {background=\"#9F281A\"}\n\n## 2 Kinds of Errors {background=\"#43464B\" background-image=\"img/slide_7/ducks.jpeg\" background-opacity=\"0.6\"}\n\n* **Syntax Errors**: Your code won't actually run\n* **Semantic Errors**: Your code runs without error, but the result is unexpected\n\n## Asking better questions, getting better answers\n\n* Places to get help (Google, Slack, [Stack Overflow](https://stackoverflow.com/help/how-to-ask?ref=dataschool.io), Github Issue pages)\n\n* What are you trying to do? (the outcome you want/expect)\n\n* What isn't working? (the code and steps you've tried so far)\n\n* Why aren't common solutions working? (proof that you've done your due diligence)\n\n## Reproducible examples\n\n* Don't require someone to have your data or your computer\n\n* Minimal amount of information and code to reproduce your error\n\n* Includes both code and your operating environment info\n\n* [More info](https://stackoverflow.com/help/minimal-reproducible-example?ref=dataschool.io\n)\n\n* An [example](https://gis.stackexchange.com/questions/268841/fit-two-sf-polygons-seamlessly) with spatial data\n\n# Coordinates and Geometries {background=\"#9F281A\"}\n\n## Reference Systems\n\n- To locate an object or quantity, we need:\n  * A fixed _origin_ (or **datum**) to measure distances to/from\n  * A _measurement unit_ (or **scale**) that defines the units of distance\n  * **Datum** + **scale** = **reference system**\n\n## Coordinate Reference Systems\n\n::: incremental\n- Map the location on an object to earth (geodetic) or flat (projected) surfaces\n\n- **Coordinate System** - the mathematical rules that specify how coordinates are assigned to points\n\n- **Datum** - the parameter or set of parameters that define the position of the origin, the scale, and the orientation of a coordinate system\n\n- **Coordinate Reference Systems** - a coordinate system that is related to an object by a datum\n:::\n## Accessing CRS with `R`\n\n- `sf::st_crs()` for vector data\n\n- `terra::crs()` for raster data\n\n- stored in WKT, epsg, or proj4string (deprecated)\n\n- The [EPSG](https://epsg.io/) website is a great reference for getting projection info\n\n## Accessing CRS with `R`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3,4,5\"}\ndir.for.files <- \"/Users/mattwilliamson/Library/CloudStorage/GoogleDrive-mattwilliamson@boisestate.edu/My Drive/TEACHING/Intro_Spatial_Data_R/Data/2023/assignment01/\"\nvector.data <- sf::st_read(dsn = paste0(dir.for.files, \"cejst_nw.shp\"), quiet=TRUE)\nsf::st_crs(x = vector.data)$input\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"WGS 84\"\n```\n:::\n\n```{.r .cell-code  code-line-numbers=\"3,4,5\"}\nsf::st_crs(x = vector.data)$proj4string\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"+proj=longlat +datum=WGS84 +no_defs\"\n```\n:::\n\n```{.r .cell-code  code-line-numbers=\"3,4,5\"}\nsf::st_crs(x = vector.data)$wkt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"GEOGCRS[\\\"WGS 84\\\",\\n    DATUM[\\\"World Geodetic System 1984\\\",\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n            LENGTHUNIT[\\\"metre\\\",1]]],\\n    PRIMEM[\\\"Greenwich\\\",0,\\n        ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    CS[ellipsoidal,2],\\n        AXIS[\\\"latitude\\\",north,\\n            ORDER[1],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        AXIS[\\\"longitude\\\",east,\\n            ORDER[2],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    ID[\\\"EPSG\\\",4326]]\"\n```\n:::\n:::\n\n\n## Accessing CRS with `R`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nraster.data <- terra::rast(x = paste0(dir.for.files, \"wildfire_hazard_agg.tif\"))\nterra::crs(raster.data, describe=TRUE, proj=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     name authority code area         extent\n1 unnamed      <NA> <NA> <NA> NA, NA, NA, NA\n                                                                                                 proj\n1 +proj=aea +lat_0=23 +lon_0=-96 +lat_1=29.5 +lat_2=45.5 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs\n```\n:::\n:::\n\n\n## What if you don't know the CRS?\n:::{style=\"font-size: 0.8em\"}\n\n- Sometimes you receive data that is missing the projection\n\n- You can assign it (**with caution**)\n\n- You can guess it using [`crsuggest::guess_crs()`](https://github.com/walkerke/crsuggest)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(mapview)\nlocations <- data.frame(\n  X = c(1200822.97857801, 1205015.51644983, 1202297.44383987, 1205877.68696743, \n        1194763.21511923, 1195463.42403192, 1199836.01037452, 1207081.96500368, \n        1201924.15986897),\n  Y = c(1246476.31475063, 1248612.72571423, 1241479.45996392, 1243898.58428024, \n        1246033.7550009, 1241827.7730307, 1234691.50899912, 1251125.67808482, \n        1252188.4333016),\n  id = 1:9\n)\n\nlocations_sf <- st_as_sf(locations, coords = c(\"X\", \"Y\"))\n```\n:::\n\n\n## \n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-18f38565da81d1adc75b\" style=\"width:960px;height:480px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-18f38565da81d1adc75b\">{\"x\":{\"options\":{\"minZoom\":-1000,\"maxZoom\":52,\"crs\":{\"crsClass\":\"L.CRS.Simple\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}},\"preferCanvas\":false},\"calls\":[{\"method\":\"createMapPane\",\"args\":[\"point\",440]},{\"method\":\"addCircleMarkers\",\"args\":[[1246476.31475063,1248612.72571423,1241479.45996392,1243898.58428024,1246033.7550009,1241827.7730307,1234691.50899912,1251125.67808482,1252188.4333016],[1200822.97857801,1205015.51644983,1202297.44383987,1205877.68696743,1194763.21511923,1195463.42403192,1199836.01037452,1207081.96500368,1201924.15986897],6,null,\"locations_sf\",{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}},\"pane\":\"point\",\"stroke\":true,\"color\":\"#333333\",\"weight\":1,\"opacity\":[0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9],\"fill\":true,\"fillColor\":[\"#4B0055\",\"#403173\",\"#00588B\",\"#007B97\",\"#009B95\",\"#00B785\",\"#53CC67\",\"#B2DC3C\",\"#FDE333\"],\"fillOpacity\":[0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6]},null,null,[\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>1&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>1&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>2&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>2&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>3&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>3&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>4&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>4&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>5&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>5&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>6&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>6&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>7&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>7&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>8&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>8&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>9&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>9&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\"],{\"maxWidth\":800,\"minWidth\":50,\"autoPan\":true,\"keepInView\":false,\"closeButton\":true,\"closeOnClick\":true,\"className\":\"\"},[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addHomeButton\",\"args\":[1194763.21511923,1234691.50899912,1207081.96500368,1252188.4333016,true,\"locations_sf\",\"Zoom to locations_sf\",\"<strong> locations_sf <\\/strong>\",\"bottomright\"]},{\"method\":\"addLayersControl\",\"args\":[[],\"locations_sf\",{\"collapsed\":true,\"autoZIndex\":true,\"position\":\"topleft\"}]},{\"method\":\"addLegend\",\"args\":[{\"colors\":[\"#4B0055 , #4B0055 0%, #403173 12.5%, #00588B 25%, #007B97 37.5%, #009B95 50%, #00B785 62.5%, #53CC67 75%, #B2DC3C 87.5%, #FDE333 100%, #FDE333 \"],\"labels\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],\"na_color\":null,\"na_label\":\"NA\",\"opacity\":1,\"position\":\"topright\",\"type\":\"numeric\",\"title\":\"locations_sf\",\"extra\":{\"p_1\":0,\"p_n\":1},\"layerId\":null,\"className\":\"info legend\",\"group\":\"locations_sf\"}]}],\"limits\":{\"lat\":[1234691.50899912,1252188.4333016],\"lng\":[1194763.21511923,1207081.96500368]},\"fitBounds\":[1234691.50899912,1194763.21511923,1252188.4333016,1207081.96500368,[]]},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"function(el, x, data) {\\n  return (\\n      function(el, x, data) {\\n      // get the leaflet map\\n      var map = this; //HTMLWidgets.find('#' + el.id);\\n      // we need a new div element because we have to handle\\n      // the mouseover output separately\\n      // debugger;\\n      function addElement () {\\n      // generate new div Element\\n      var newDiv = $(document.createElement('div'));\\n      // append at end of leaflet htmlwidget container\\n      $(el).append(newDiv);\\n      //provide ID and style\\n      newDiv.addClass('lnlt');\\n      newDiv.css({\\n      'position': 'relative',\\n      'bottomleft':  '0px',\\n      'background-color': 'rgba(255, 255, 255, 0.7)',\\n      'box-shadow': '0 0 2px #bbb',\\n      'background-clip': 'padding-box',\\n      'margin': '0',\\n      'padding-left': '5px',\\n      'color': '#333',\\n      'font': '9px/1.5 \\\"Helvetica Neue\\\", Arial, Helvetica, sans-serif',\\n      'z-index': '700',\\n      });\\n      return newDiv;\\n      }\\n\\n\\n      // check for already existing lnlt class to not duplicate\\n      var lnlt = $(el).find('.lnlt');\\n\\n      if(!lnlt.length) {\\n      lnlt = addElement();\\n\\n      // grab the special div we generated in the beginning\\n      // and put the mousmove output there\\n\\n      map.on('mousemove', function (e) {\\n      if (e.originalEvent.ctrlKey) {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                           ' x: ' + (e.latlng.lng).toFixed(5) +\\n                           ' | y: ' + (e.latlng.lat).toFixed(5) +\\n                           ' | epsg: NA ' +\\n                           ' | proj4: NA ' +\\n                           ' | zoom: ' + map.getZoom() + ' ');\\n      } else {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                      ' lon: ' + (e.latlng.lng).toFixed(5) +\\n                      ' | lat: ' + (e.latlng.lat).toFixed(5) +\\n                      ' | zoom: ' + map.getZoom() + ' ');\\n      }\\n      });\\n\\n      // remove the lnlt div when mouse leaves map\\n      map.on('mouseout', function (e) {\\n      var strip = document.querySelector('.lnlt');\\n      if( strip !==null) strip.remove();\\n      });\\n\\n      };\\n\\n      //$(el).keypress(67, function(e) {\\n      map.on('preclick', function(e) {\\n      if (e.originalEvent.ctrlKey) {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                      ' lon: ' + (e.latlng.lng).toFixed(5) +\\n                      ' | lat: ' + (e.latlng.lat).toFixed(5) +\\n                      ' | zoom: ' + map.getZoom() + ' ');\\n      var txt = document.querySelector('.lnlt').textContent;\\n      console.log(txt);\\n      //txt.innerText.focus();\\n      //txt.select();\\n      setClipboardText('\\\"' + txt + '\\\"');\\n      }\\n      });\\n\\n      }\\n      ).call(this.getMap(), el, x, data);\\n}\",\"data\":null},{\"code\":\"function(el, x, data) {\\n  return (function(el,x,data){\\n           var map = this;\\n\\n           map.on('keypress', function(e) {\\n               console.log(e.originalEvent.code);\\n               var key = e.originalEvent.code;\\n               if (key === 'KeyE') {\\n                   var bb = this.getBounds();\\n                   var txt = JSON.stringify(bb);\\n                   console.log(txt);\\n\\n                   setClipboardText('\\\\'' + txt + '\\\\'');\\n               }\\n           })\\n        }).call(this.getMap(), el, x, data);\\n}\",\"data\":null}]}}</script>\n```\n:::\n:::\n\n\n## Guessing CRS\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(crsuggest)\nguess_crs(locations_sf, \"Chennai, India\", n_return = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  crs_code dist_km\n  <chr>      <dbl>\n1 7785        4.07\n2 24344     806.  \n3 32644     806.  \n4 32244     806.  \n5 32444     806.  \n```\n:::\n\n```{.r .cell-code}\nst_crs(locations_sf) <- 7785\n```\n:::\n\n\n##\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-7254430922d2ad5528cf\" style=\"width:960px;height:480px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7254430922d2ad5528cf\">{\"x\":{\"options\":{\"minZoom\":1,\"maxZoom\":52,\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}},\"preferCanvas\":false,\"bounceAtZoomLimits\":false,\"maxBounds\":[[[-90,-370]],[[90,370]]]},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.Positron\",\"CartoDB.Positron\",\"CartoDB.Positron\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.DarkMatter\",\"CartoDB.DarkMatter\",\"CartoDB.DarkMatter\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"OpenStreetMap\",\"OpenStreetMap\",\"OpenStreetMap\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"Esri.WorldImagery\",\"Esri.WorldImagery\",\"Esri.WorldImagery\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"OpenTopoMap\",\"OpenTopoMap\",\"OpenTopoMap\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"createMapPane\",\"args\":[\"point\",440]},{\"method\":\"addCircleMarkers\",\"args\":[[13.09689600000001,13.11592000000002,13.05164600000001,13.07326500000004,13.09329200000002,13.05524000000001,12.99047100000001,13.13848600000003,13.14843800000002],[80.22697400000003,80.26577000000002,80.24022699999999,80.27339199999996,80.171082,80.17726099999999,80.21708699999996,80.28499600000004,80.23751400000003],6,null,\"locations_sf\",{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}},\"pane\":\"point\",\"stroke\":true,\"color\":\"#333333\",\"weight\":1,\"opacity\":[0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9],\"fill\":true,\"fillColor\":[\"#4B0055\",\"#403173\",\"#00588B\",\"#007B97\",\"#009B95\",\"#00B785\",\"#53CC67\",\"#B2DC3C\",\"#FDE333\"],\"fillOpacity\":[0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6]},null,null,[\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>1&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>1&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>2&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>2&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>3&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>3&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>4&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>4&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>5&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>5&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>6&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>6&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>7&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>7&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>8&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>8&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>9&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>id&emsp;<\\/th><td>9&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\"],{\"maxWidth\":800,\"minWidth\":50,\"autoPan\":true,\"keepInView\":false,\"closeButton\":true,\"closeOnClick\":true,\"className\":\"\"},[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addScaleBar\",\"args\":[{\"maxWidth\":100,\"metric\":true,\"imperial\":true,\"updateWhenIdle\":true,\"position\":\"bottomleft\"}]},{\"method\":\"addHomeButton\",\"args\":[80.171082,12.99047100000001,80.28499600000004,13.14843800000002,true,\"locations_sf\",\"Zoom to locations_sf\",\"<strong> locations_sf <\\/strong>\",\"bottomright\"]},{\"method\":\"addLayersControl\",\"args\":[[\"CartoDB.Positron\",\"CartoDB.DarkMatter\",\"OpenStreetMap\",\"Esri.WorldImagery\",\"OpenTopoMap\"],\"locations_sf\",{\"collapsed\":true,\"autoZIndex\":true,\"position\":\"topleft\"}]},{\"method\":\"addLegend\",\"args\":[{\"colors\":[\"#4B0055 , #4B0055 0%, #403173 12.5%, #00588B 25%, #007B97 37.5%, #009B95 50%, #00B785 62.5%, #53CC67 75%, #B2DC3C 87.5%, #FDE333 100%, #FDE333 \"],\"labels\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],\"na_color\":null,\"na_label\":\"NA\",\"opacity\":1,\"position\":\"topright\",\"type\":\"numeric\",\"title\":\"locations_sf\",\"extra\":{\"p_1\":0,\"p_n\":1},\"layerId\":null,\"className\":\"info legend\",\"group\":\"locations_sf\"}]}],\"limits\":{\"lat\":[12.99047100000001,13.14843800000002],\"lng\":[80.171082,80.28499600000004]},\"fitBounds\":[12.99047100000001,80.171082,13.14843800000002,80.28499600000004,[]]},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"function(el, x, data) {\\n  return (\\n      function(el, x, data) {\\n      // get the leaflet map\\n      var map = this; //HTMLWidgets.find('#' + el.id);\\n      // we need a new div element because we have to handle\\n      // the mouseover output separately\\n      // debugger;\\n      function addElement () {\\n      // generate new div Element\\n      var newDiv = $(document.createElement('div'));\\n      // append at end of leaflet htmlwidget container\\n      $(el).append(newDiv);\\n      //provide ID and style\\n      newDiv.addClass('lnlt');\\n      newDiv.css({\\n      'position': 'relative',\\n      'bottomleft':  '0px',\\n      'background-color': 'rgba(255, 255, 255, 0.7)',\\n      'box-shadow': '0 0 2px #bbb',\\n      'background-clip': 'padding-box',\\n      'margin': '0',\\n      'padding-left': '5px',\\n      'color': '#333',\\n      'font': '9px/1.5 \\\"Helvetica Neue\\\", Arial, Helvetica, sans-serif',\\n      'z-index': '700',\\n      });\\n      return newDiv;\\n      }\\n\\n\\n      // check for already existing lnlt class to not duplicate\\n      var lnlt = $(el).find('.lnlt');\\n\\n      if(!lnlt.length) {\\n      lnlt = addElement();\\n\\n      // grab the special div we generated in the beginning\\n      // and put the mousmove output there\\n\\n      map.on('mousemove', function (e) {\\n      if (e.originalEvent.ctrlKey) {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                           ' lon: ' + (e.latlng.lng).toFixed(5) +\\n                           ' | lat: ' + (e.latlng.lat).toFixed(5) +\\n                           ' | zoom: ' + map.getZoom() +\\n                           ' | x: ' + L.CRS.EPSG3857.project(e.latlng).x.toFixed(0) +\\n                           ' | y: ' + L.CRS.EPSG3857.project(e.latlng).y.toFixed(0) +\\n                           ' | epsg: 3857 ' +\\n                           ' | proj4: +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs ');\\n      } else {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                      ' lon: ' + (e.latlng.lng).toFixed(5) +\\n                      ' | lat: ' + (e.latlng.lat).toFixed(5) +\\n                      ' | zoom: ' + map.getZoom() + ' ');\\n      }\\n      });\\n\\n      // remove the lnlt div when mouse leaves map\\n      map.on('mouseout', function (e) {\\n      var strip = document.querySelector('.lnlt');\\n      if( strip !==null) strip.remove();\\n      });\\n\\n      };\\n\\n      //$(el).keypress(67, function(e) {\\n      map.on('preclick', function(e) {\\n      if (e.originalEvent.ctrlKey) {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                      ' lon: ' + (e.latlng.lng).toFixed(5) +\\n                      ' | lat: ' + (e.latlng.lat).toFixed(5) +\\n                      ' | zoom: ' + map.getZoom() + ' ');\\n      var txt = document.querySelector('.lnlt').textContent;\\n      console.log(txt);\\n      //txt.innerText.focus();\\n      //txt.select();\\n      setClipboardText('\\\"' + txt + '\\\"');\\n      }\\n      });\\n\\n      }\\n      ).call(this.getMap(), el, x, data);\\n}\",\"data\":null},{\"code\":\"function(el, x, data) {\\n  return (function(el,x,data){\\n           var map = this;\\n\\n           map.on('keypress', function(e) {\\n               console.log(e.originalEvent.code);\\n               var key = e.originalEvent.code;\\n               if (key === 'KeyE') {\\n                   var bb = this.getBounds();\\n                   var txt = JSON.stringify(bb);\\n                   console.log(txt);\\n\\n                   setClipboardText('\\\\'' + txt + '\\\\'');\\n               }\\n           })\\n        }).call(this.getMap(), el, x, data);\\n}\",\"data\":null}]}}</script>\n```\n:::\n:::\n\n\n# {background=\"#9F281A\"}\n\n>All spatial analysis and mapping requires that your data is aligned correctly.\n\n## Changing the CRS\n\n- Requires recomputing coordinates\n\n- Coordinate Conversion - No change to the datum; lossless\n\n- Coordinate Transformation - New datum; relies on models; some error involved\n\n## Changing the CRS in `R`\n\n- `sf::st_transform` for vectors\n\n- `terra::project` for rasters\n\n- **Projecting Rasters Causes Distortion**\n\n## Changing the CRS in `R`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,2,4,5\"}\nvector.data.proj <- vector.data %>% \n  sf::st_transform(., crs = 3083)\nst_crs(vector.data.proj)$input\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"EPSG:3083\"\n```\n:::\n\n```{.r .cell-code  code-line-numbers=\"1,2,4,5\"}\nvector.data.proj.rast <- vector.data %>% \n  sf::st_transform(., crs = crs(raster.data))\nst_crs(vector.data.proj.rast)$proj4string\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"+proj=aea +lat_0=23 +lon_0=-96 +lat_1=29.5 +lat_2=45.5 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs\"\n```\n:::\n:::\n\n\n## Changing the CRS in `R`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraster.data.proj <- project(x = raster.data, y = \"EPSG:3083\")\ncrs(raster.data.proj, describe=TRUE, proj=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                     name authority code\n1 NAD83 / Texas Centric Albers Equal Area      EPSG 3083\n                         area                        extent\n1 United States (USA) - Texas -106.66, -93.50, 36.50, 25.83\n                                                                                                            proj\n1 +proj=aea +lat_0=18 +lon_0=-100 +lat_1=27.5 +lat_2=35 +x_0=1500000 +y_0=6000000 +datum=NAD83 +units=m +no_defs\n```\n:::\n\n```{.r .cell-code}\nraster.data.proj.vect <- project(x = raster.data, y = vect(vector.data))\ncrs(raster.data.proj.vect, describe=TRUE, proj=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    name authority code area         extent                                proj\n1 WGS 84      EPSG 4326 <NA> NA, NA, NA, NA +proj=longlat +datum=WGS84 +no_defs\n```\n:::\n:::\n\n\n# Geometries {background=\"#9F281A\"}\n\n\n\n \n## The Vector Data Model\n\n::: columns\n::: {.column width=\"60%\"}\n::: {style=\"font-size: 0.8em\"} \n- Coordinates define the __Vertices__ (i.e., discrete x-y locations) that comprise the geometry\n\n- The organization of those vertices define the _shape_ of the vector\n\n- General types: points, lines, polygons\n:::\n:::\n::: {.column width=\"40%\"}\n![](img/slide_7/points-lines-polygons-vector-data-types.png)\n:::\n:::\n\n\n## Representing vector data in R\n\n::: columns\n::: {.column width=\"40%\"}\n![From Lovelace et al.](img/slide_7/sf-classes.png)\n:::\n::: {.column width=\"60%\"}\n::: {style=\"font-size: 0.8em\"} \n* `sf` hierarchy reflects increasing complexity of geometry\n  * `st_point`, `st_linestring`, `st_polygon` for single features\n  * `st_multi*` for multiple features of the same type\n  * `st_geometrycollection` for multiple feature types\n  * `st_as_sfc` creates the geometry list column for many `sf` operations\n:::\n:::\n:::\n\n## Points\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nproj <- st_crs('+proj=longlat +datum=WGS84')\nlong <- c(-116.7, -120.4, -116.7, -113.5, -115.5, -120.8, -119.5, -113.7, -113.7, -110.7)\nlat <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9, 36.2, 39, 41.6, 36.9)\nst_multipoint(cbind(long, lat)) %>% st_sfc(., crs = proj)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 1 feature \nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -120.8 ymin: 35.7 xmax: -110.7 ymax: 45.3\nGeodetic CRS:  +proj=longlat +datum=WGS84\n```\n:::\n:::\n\n## Points\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_multipoint(cbind(long, lat)) %>% \n                   st_sfc(., crs = proj))\n```\n\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## Lines\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)\nlat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)\nlonlat <- cbind(lon, lat)\npts <- st_multipoint(lonlat)\n\nsfline <- st_multilinestring(list(pts[1:3,], pts[4:7,]))\nstr(sfline)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 2\n $ : num [1:3, 1:2] -116.8 -114.2 -112.9 41.3 42.9 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"lon\" \"lat\"\n $ : num [1:4, 1:2] -111.9 -114.2 -115.4 -117.7 39.8 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"lon\" \"lat\"\n - attr(*, \"class\")= chr [1:3] \"XY\" \"MULTILINESTRING\" \"sfg\"\n```\n:::\n:::\n\n\n## Lines\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_multilinestring(list(pts[1:3,], pts[4:7,])))\n```\n\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n## Polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\nouter = matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE)\nhole1 = matrix(c(1,1,1,2,2,2,2,1,1,1),ncol=2, byrow=TRUE)\nhole2 = matrix(c(5,5,5,6,6,6,6,5,5,5),ncol=2, byrow=TRUE)\ncoords = list(outer, hole1, hole2)\npl1 = st_polygon(coords)\n```\n:::\n\n\n## Polygons\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pl1)\n```\n\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n## Common Problems with Vector Data\n\n::: columns\n::: {.column width=\"60%\"}\n::: {style=\"font-size: 0.8em\"} \n * Vectors and scale\n \n * Slivers and overlaps \n \n * Undershoots and overshoots\n \n * Self-intersections and rings\n:::\n:::\n::: {.column width=\"40%\"}\n![Topology Errors - Saylor Acad.](img/slide_7/topology_errors.png)\n:::\n:::\n\n:::{style=\"font-size: 1.2em; text-align: middle\"}\nWe'll use `st_is_valid()` to check this, but fixing can be tricky\n:::\n\n## Fixing Problematic Topology\n\n* `st_make_valid()` for simple cases\n\n* `st_buffer` with `dist=0` \n\n* More complex errors need more [complex approaches](https://r-spatial.org/r/2017/03/19/invalid.html)\n\n## A Note on Vectors \n\n> Moving forward we will rely primarily on the `sf` package for vector manipulation. Some packages require objects to be a different class. `terra`, for example, relies on `SpatVectors`. You can use `as()` to coerce objects from one type to another (assuming a method exists). You can also explore other packages. Many packages provide access to the 'spatial' backbones of `R` (like `geos` and `gdal`), they just differ in how the \"verbs\" are specified. For `sf` operations the `st_` prefix is typical. For `rgeos` operations, the `g` prefix is common.\n\n",
    "supporting": [
      "07-slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<script src=\"../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<link href=\"../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/leaflet-binding-2.1.2/leaflet.js\"></script>\n<link href=\"../site_libs/HomeButton-0.0.1/home-button.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/HomeButton-0.0.1/home-button.js\"></script>\n<script src=\"../site_libs/HomeButton-0.0.1/easy-button-src.min.js\"></script>\n<script src=\"../site_libs/clipboard-0.0.1/setClipboardText.js\"></script>\n<link href=\"../site_libs/mapviewCSS-0.0.1/mapview-popup.css\" rel=\"stylesheet\" />\n<link href=\"../site_libs/mapviewCSS-0.0.1/mapview.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/leaflet-providers-1.13.0/leaflet-providers_1.13.0.js\"></script>\n<script src=\"../site_libs/leaflet-providers-plugin-2.1.2/leaflet-providers-plugin.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}