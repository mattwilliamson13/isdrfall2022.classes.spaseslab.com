{
  "hash": "b64d014053132e44b954b79aa4e2382a",
  "result": {
    "markdown": "---\ntitle: \"Operations on Raster Data I\"\nsubtitle: \"HES 505 Fall 2023: Session 13\"\nauthor: \"Matt Williamson\"\nformat: \n  revealjs:\n    theme: mytheme.scss\n    slide-number: true\n    show-slide-number: print\n    self-contained: true  \n---\n\n\n# Today's Plan {background=\"#43464B\" background-image=\"img/slide_10/NEDUS.gif\" background-opacity=\"0.7\"}\n\n::: footer\nImage Source: USGS\n:::\n\n## Objectives\n\n- By the end of today, you should be able to:\n\n  - Align rasters for spatial processing\n\n  - Adjust the resolution of raster data\n\n  - Combine (or reduce) rasters to match the extent of your analysis\n\n# Aligning rasters for spatial processing {background=\"#9F281A\"}\n## Projecting raster data\n\n::: columns\n:::{.column width=\"50%\"}\n::: {style=\"font-size: 0.7em\"}\n* Transformation from lat/long to planar CRS involves some loss of precision\n* New cell values estimated using overlap with original cells\n* Interpolation for continuous data, nearest neighbor for categorical data\n* Equal-area projections are preferred; especially for large areas\n\n:::\n:::\n::: {.column width=\"50%\"}\n::: {style=\"font-size: 0.7em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(terra)\nlibrary(spDataLarge)\nr <- rast(xmin=-110, xmax=-90, ymin=40, ymax=60, ncols=40, nrows=40)\nvalues(r) <- 1:ncell(r)\nplot(r)\n```\n\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n:::\n:::\n:::\n\n## Projecting raster data\n\n::: columns\n:::{.column width=\"50%\"}\n* simple method; alignment not guaranteed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewcrs <- \"+proj=robin +datum=WGS84\"\npr1 <- terra::project(r, newcrs)\nplot(pr1)\n```\n\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/newproj1-1.png){width=384}\n:::\n:::\n\n:::\n:::{.column width=\"50%\"}\n* providing a template to ensure alignment\n\n::: {.cell}\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/newproj2-1.png){width=384}\n:::\n:::\n\n:::\n:::\n\n## Aligning Data: `resample`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- rast(nrow=3, ncol=3, xmin=0, xmax=10, ymin=0, ymax=10)\nvalues(r) <- 1:ncell(r)\ns <- rast(nrow=25, ncol=30, xmin=1, xmax=11, ymin=-1, ymax=11)\nx <- resample(r, s, method=\"bilinear\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/resampplot-1.png){width=960}\n:::\n:::\n\n\n# Adjusting resolution {background=\"#9F281A\"}\n\n## Downscaling and Upscaling\n\n- Aligning data for later analysis\n\n- Remembering _scale_\n\n- Thinking about support\n\n## Changing resolutions\n* `aggregate`, `disaggregate`, `resample` allow changes in cell size\n* `aggregate` requires a function (e.g., `mean()` or `min()`) to determine what to do with the grouped values\n\n* `resample` allows changes in cell size __and__ shifting of cell centers (slower)\n\n## Changing resolutions: aggregate\n\n::: columns\n:::{.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- rast()\nr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 180, 360, 1  (nrow, ncol, nlyr)\nresolution  : 1, 1  (x, y)\nextent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \n```\n:::\n\n```{.r .cell-code}\nvalues(r) <- 1:ncell(r)\nplot(r)\n```\n\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/agg1-1.png){width=960}\n:::\n:::\n\n:::\n:::{.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nra <- aggregate(r, 20)\nra\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 9, 18, 1  (nrow, ncol, nlyr)\nresolution  : 20, 20  (x, y)\nextent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsource(s)   : memory\nname        :   lyr.1 \nmin value   :  3430.5 \nmax value   : 61370.5 \n```\n:::\n\n```{.r .cell-code}\nplot(ra)\n```\n\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/agg2-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## Changing resolutions: disagg\n\n::: columns\n:::{.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nra <- aggregate(r, 20)\nplot(ra)\n```\n\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/agg3-1.png){width=960}\n:::\n:::\n\n:::\n:::{.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nrd <- disagg(r, 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n|---------|---------|---------|---------|\n=====\n                                          \n```\n:::\n\n```{.r .cell-code}\nrd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 3600, 7200, 1  (nrow, ncol, nlyr)\nresolution  : 0.05, 0.05  (x, y)\nextent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsource      : spat_4QyAlALziT1WmUe_97640.tif \nname        : lyr.1 \nmin value   :     1 \nmax value   : 64800 \n```\n:::\n\n```{.r .cell-code}\nplot(rd)\n```\n\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/agg4-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n\n# Modifying the Extent {background=\"#9F281A\"}\n\n## Dealing with Different Extents\n\n::: columns\n::: {.column width=\"50%\"}\n- Raster extents often larger than our analysis\n\n- Reducing memory and computational resources\n\n- Making attractive maps\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/unnamed-chunk-2-1.png){width=576}\n:::\n:::\n\n:::\n:::\n\n## Using `terra::crop()`\n\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/unnamed-chunk-3-1.png){width=576}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n::: {style=\"font-size: 0.7em\"}\n- Coordinate Reference System must be the same for both objects\n\n- Crop is based on the (converted) `SpatExtent` of the 2nd object\n\n- `snap` describes how `y` will be aligned to the raster\n\n- Returns all data within the extent\n:::\n:::\n:::\n\n## Using `terra::crop()`\n\n::: columns\n::: {.column width=\"60%\"}\n::: {style=\"font-size: 0.7em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(terra)\nlibrary(spDataLarge)\nsrtm = rast(system.file(\"raster/srtm.tif\", package = \"spDataLarge\"))\nzion = read_sf(system.file(\"vector/zion.gpkg\", package = \"spDataLarge\"))\nzion = st_transform(zion, crs(srtm))\n\ncrs(srtm) == crs(zion)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nsrtm.crop <- crop(x=srtm, y=zion, snap=\"near\")\n```\n:::\n\n:::\n:::\n::: {.column width=\"40%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/unnamed-chunk-5-1.png){width=576}\n:::\n:::\n\n:::\n:::\n\n## Using `mask()`\n::: {style=\"font-size: 0.7em\"}\n\n* Often want to get rid of all values outside of vector\n\n* Can set `mask=TRUE` in `crop()` (`y` must be `SpatVector`)\n\n* Or use `mask()`\n\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nsrtm.crop.msk <- crop(x=srtm, y=vect(zion), snap=\"near\", mask=TRUE)\nplot(srtm.crop.msk)\n```\n\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nsrtm.msk <- mask(srtm.crop, vect(zion))\nplot(srtm.msk)\n```\n\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## Using `mask()`\n::: {style=\"font-size: 0.7em\"}\n\n* Allows more control over what the mask does\n\n* Can set `maskvalues` and `updatevalues` to change the resulting raster\n\n* Can also use `inverse` to mask out the vector\n\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nsrtm.msk <- mask(srtm.crop, vect(zion), updatevalue=-1000)\nplot(srtm.msk)\n```\n\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nsrtm.msk <- mask(srtm.crop, vect(zion), inverse=TRUE, updatevalue=0)\nplot(srtm.msk)\n```\n\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## Extending boundaries\n::: {style=\"font-size: 0.7em\"}\n* Vector slightly larger than raster\n\n* Especially when using buffered datasets\n\n* Can use `extend`\n\n* Not exact; depends on `snap()`\n\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nzion.buff <-  zion %>% \n  st_buffer(., 10000)\nsrtm.ext <- extend(srtm, vect(zion.buff))\next(srtm.ext)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatExtent : -113.343749879444, -112.74791654615, 37.0479167631968, 37.5979167631601 (xmin, xmax, ymin, ymax)\n```\n:::\n\n```{.r .cell-code}\next(vect(zion.buff))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatExtent : -113.343652923976, -112.747986193365, 37.0477357596604, 37.5977812137969 (xmin, xmax, ymin, ymax)\n```\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](13-slides_files/figure-revealjs/unnamed-chunk-11-1.png){width=432}\n:::\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "13-slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}