{
  "hash": "eb876eb0dca48711839a37a6e048aa05",
  "result": {
    "markdown": "---\ntitle: \"Operations With Vector Data II\"\nsubtitle: \"HES 505 Fall 2023: Session 12\"\nauthor: \"Matt Williamson\"\nformat: \n  revealjs:\n    theme: mytheme.scss\n    slide-number: true\n    show-slide-number: print\n    self-contained: true  \n---\n\n\n# Today's Plan {background=\"#43464B\" background-image=\"img/slide_10/NEDUS.gif\" background-opacity=\"0.7\"}\n\n::: footer\nImage Source: USGS\n:::\n\n## Objectives\n\n- By the end of today, you should be able to:\n\n  - Translate pseudocode commands into functional workflows\n\n  - Articulate the importance of key arguments to `sf` functions\n\n  - Generate new attributes and geometries from existing data.\n  \n# Motivating Questions {background=\"#9F281A\"}\n\n## Example questions\n\n- What is the chronic heart disease risk of the 10 ID tracts that are furthest from hospitals?\n\n- How may $km^2$ of ID are served by more than 1 hospital?\n\n- What is the difference between the average risk of chronic heart disease in the tracts served by at least two hospitals compared to those that aren't served by any?\n\n## Key assummptions\n\n- All hospital locations are contained in the landmarks dataset\n\n- A hospital service area is defined as a 50km radius\n\n- Hospital service areas can cross state lines.\n\n# Example 1 {background=\"#9F281A\"}\n\n>What is the chronic heart disease risk of the 10 ID tracts that are furthest from hospitals?\n\n\n## What do we need to know?\n\n- Where are the hospitals?\n\n- How far are the hospitals from ID tracts?\n\n- Which tracts are the furthest?\n\n- What is the CHD risk?\n\n## Pseudocode\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1. Load the hospital and cdc datasets\n2. Align the data\n3. Filter cdc so it only has Idaho tracts\n4. Calculate distance from hospitals\n5. Find top 10 tracts based on distance\n6. Map chronic heart disease risk\n```\n:::\n\n\n## Adding Functions\n\n1. Load the hospital and cdc datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\nhospital.sf <- read_csv(\"data/opt/data/2023/vectorexample/hospitals_pnw.csv\") %>% \n  st_as_sf(., coords = c(\"longitude\", \"latitude\"))\nst_crs(hospital.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System: NA\n```\n:::\n\n```{.r .cell-code}\ncdc.sf <- read_sf(\"data/opt/data/2023/vectorexample/cdc_nw.shp\")\nst_crs(cdc.sf)$epsg\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n## Adding Functions\n\n2. Align the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(hospital.sf) <- 4326\n\nhospital.sf.proj <- hospital.sf %>% \n  st_transform(., crs=st_crs(cdc.sf))\n\nst_crs(hospital.sf.proj) == st_crs(cdc.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nidentical(st_crs(hospital.sf.proj), st_crs(cdc.sf))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Adding Functions\n\n3. Filter cdc so it only has Idaho tracts\n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ncdc.idaho <- cdc.sf %>% \n  filter(STATEFP == \"16\")\n```\n:::\n\n:::\n:::{.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(cdc.idaho))\n```\n\n::: {.cell-output-display}\n![](12-slides_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## Adding Functions\n\n4. Calculate distance from hospitals\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnearest.hosp <- st_nearest_feature(cdc.idaho, hospital.sf.proj)\nstr(nearest.hosp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int [1:191] 6 45 45 45 3 3 3 3 6 3 ...\n```\n:::\n\n```{.r .cell-code}\nnearest.hosp.sf <- hospital.sf.proj[nearest.hosp,]\nhospital.dist <- st_distance(cdc.idaho, nearest.hosp.sf, by_element = TRUE)\nstr(hospital.dist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Units: [m] num [1:191] 29501 46541 39386 32726 23534 ...\n```\n:::\n:::\n\n## Adding Functions\n5. Find top 10 counties based on distance\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdc.idaho.hosp <- cdc.idaho %>% \n  mutate(., disthosp = hospital.dist)\n\ncdc.furthest <- cdc.idaho.hosp %>% \n  slice_max(., n=10, order_by= disthosp)\n\nhead(cdc.furthest$disthosp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnits: [m]\n[1] 94506.47 83446.11 81134.60 70762.53 70425.16 70084.68\n```\n:::\n:::\n\n\n\n## Adding Functions\n6. Map chronic heart disease risk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tmap)\n\ntm_shape(tigris::counties(\"ID\", progress_bar=FALSE)) +\n  tm_polygons() +\n  tm_shape(cdc.furthest) +\n  tm_polygons(\"disthosp\", title=\"Dist to Hospital (m2)\") +\n  tm_shape(hospital.sf.proj[cdc.idaho,]) +\n  tm_symbols(size=0.25)\n```\n\n::: {.cell-output-display}\n![](12-slides_files/figure-revealjs/makemap-1.png){width=960}\n:::\n:::\n\n# Example questions\n\n>How may $km^2$ of ID are served by more than 1 hospital?\n\n## What do we need to know?\n\n- Where are the hospitals?\n\n- What is the service area for each hospital?\n\n- Where do those service areas overlap?\n\n- How big is the overlap area?\n\n## Pseudocode\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1. Load the hospital dataset and add projection\n2. Buffer hospitals by service area\n3. Find intersection of service areas\n4. Calculate area of overlap\n```\n:::\n\n\n## Adding Functions\n\n1. Load the hospital dataset and add projection\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhospital.sf <- read_csv(\"data/opt/data/2023/vectorexample/hospitals_pnw.csv\") %>% \n  st_as_sf(., coords = c(\"longitude\", \"latitude\"))\n\nst_crs(hospital.sf) <- 4326\n```\n:::\n\n\n## Adding Functions\n\n2. Buffer hospitals by service area\n\n\n::: columns\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhospital.buf <- hospital.sf %>%\n  filter(STATEFP == \"16\") %>% \n  st_buffer(., dist = units::set_units(30, \"kilometers\"))\n```\n:::\n\n\n:::\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(hospital.buf))\n```\n\n::: {.cell-output-display}\n![](12-slides_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Adding Functions\n\n3. Find intersection of service areas\n::: columns\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhospital.int <- hospital.buf %>% \n  st_intersection()\nall(st_is_valid(hospital.int))\n```\n:::\n\n::: \n::: {.column width=\"40%\"}\n\n## Adding Functions\n4. Calculate area of overlap\n\n## Plotting the Results\n\n## Example questions\n\n- What is the difference between the average risk of chronic heart disease in the counties served by at least two hospitals compared to those that aren't served by any?\n\n## What do we need to know?\n\n## Pseudocode\n\n## Adding Functions\n\n## Plotting the Results\n",
    "supporting": [
      "12-slides_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}