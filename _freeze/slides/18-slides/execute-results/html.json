{
  "hash": "6425f226b7ecb4b988f73ccae2a8f4f6",
  "result": {
    "markdown": "---\ntitle: \"Overlays\"\nsubtitle: \"HES 505 Fall 2022: Session 18\"\nauthor: \"Matt Williamson\"\nformat: \n  revealjs:\n    theme: mytheme.scss\n    slide-number: true\n    show-slide-number: print\n    self-contained: true  \n---\n\n\n\n\n# Objectives {background=\"#0033A0\"}\n\nBy the end of today you should be able to:\n\n- integrate a covariate into KDE's\n\n- Describe the utility and shortcomings of overlay analysis\n\n- Describe and implement different overlay approaches\n\n## Re-visiting Density Methods \n\n::: columns\n::: {.column width=\"60%\"}\n\n* The overall _intensity_ of a point pattern is a crude density estimate\n\n$$\n\\begin{equation}\n\\hat{\\lambda} = \\frac{\\#(S \\in A )}{a}\n\\end{equation}\n$$\n\n* Local density = quadrat counts\n:::\n::: {.column width=\"40%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-slides_files/figure-revealjs/unnamed-chunk-2-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n\n## Kernel Density Estimates (KDE)\n\n$$\n\\begin{equation}\n\\hat{f}(x) = \\frac{1}{nh_xh_y} \\sum_{i=1}^n k\\bigg(\\frac{{x-x_i}}{h_x},\\frac{{y-y_i}}{h_y} \\bigg)\n\\end{equation}\n$$\n::: {style=\"font-size: 0.7em\"}\n* Assume each location in $\\mathbf{s_i}$ drawn from unknown distribution\n\n* Distribution has probability density $f(\\mathbf{x})$\n\n* Estimate $f(\\mathbf{x})$ by averaging probability \"bumps\" around each location\n\n* Need different object types for most operations in `R` (`as.ppp`)\n:::\n\n## Kernel Density Estimates (KDE)\n::: {style=\"font-size: 0.7em\"}\n* $h$ is the bandwidth and $k$ is the kernel\n\n* We can use `stats::density` to explore\n\n* __kernel__: defines the shape, size, and weight assigned to observations in the window\n\n* __bandwidth__ often assigned based on distance from the window center\n\n\n::: {.cell}\n\n:::\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-slides_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## Kernel Density Estimates (KDE)\n\n* What if we imagine _intensity_ is a function of another covariate\n\n::: columns\n::: {.column width=\"50%}\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-slides_files/figure-revealjs/unnamed-chunk-5-1.png){width=480}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-slides_files/figure-revealjs/unnamed-chunk-6-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n## Adding a Covariate to KDE\n\n* `rhohat` computes nonparametric intensity $\\rho$ as a function of a covariate\n\n$$\n\\begin{equation}\n\\lambda(u) = \\rho(Z(u))\n\\end{equation}\n$$\n\n\n\n::: {.cell}\n\n:::\n\n\n## Adding a Covariate to KDE\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-slides_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-slides_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## Adding a Covariate to KDE\n* We can also think more generatively\n\n* Model explicitly as a Poisson Point Process using `ppm`\n\n$$\n\\begin{equation}\n\\lambda(u) = \\exp^{Int + \\beta X}\n\\end{equation}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the Poisson point process model\nPPM1 <- ppm(starbucks.km ~ pop.lg.km)\n# Plot the relationship\n```\n:::\n\n\n## Adding a Covariate to KDE\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nNonstationary Poisson process\nFitted to point pattern dataset 'starbucks.km'\n\nLog intensity:  ~pop.lg.km\n\nFitted trend coefficients:\n(Intercept)   pop.lg.km \n -13.710551    1.279928 \n\n              Estimate       S.E.    CI95.lo    CI95.hi Ztest      Zval\n(Intercept) -13.710551 0.46745489 -14.626746 -12.794356   *** -29.33021\npop.lg.km     1.279928 0.05626785   1.169645   1.390211   ***  22.74705\nProblem:\n Values of the covariate 'pop.lg.km' were NA or undefined at 0.57% (4 out of \n699) of the quadrature points\n```\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-slides_files/figure-revealjs/unnamed-chunk-12-1.png){width=576}\n:::\n:::\n\n:::\n:::\n\n# Overlays {background=\"#0033A0\"}\n\n## Overlays\n\n* Methods for identifying optimal site selection or suitability\n\n* Apply a common scale to diverse or disimilar outputs\n\n## Getting Started\n\n::: {style=\"font-size: 0.7em\"}\n1. Define the problem.\n\n2. Break the problem into submodels.\n\n3. Determine significant layers.\n\n4. Reclassify or transform the data within a layer.\n\n5. Add or combine the layers.\n\n6. Verify\n:::\n\n## Boolean Overlays\n\n::: columns\n::: {.column width=\"50%\"}\n* Successive disqualification of areas\n\n* Series of \"yes/no\" questions\n\n* \"Sieve\" mapping\n:::\n:::{.column width=\"50%\"}\n![](img/slide_18/Gis_layers.png)\n:::\n:::\n\n## Boolean Overlays\n\n* Reclassifying\n\n* Which types of land are appropriate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlcd <-  rast(system.file(\"raster/nlcd.tif\", package = \"spDataLarge\"))\nplot(nlcd)\n```\n\n::: {.cell-output-display}\n![](18-slides_files/figure-revealjs/unnamed-chunk-13-1.png){width=480}\n:::\n:::\n\n\n## Boolean Overlays\n\n* Which types of land are appropriate?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlcd.segments <- segregate(nlcd)\nnames(nlcd.segments) <- levels(nlcd)[[1]][-1,2]\nplot(nlcd.segments)\n```\n\n::: {.cell-output-display}\n![](18-slides_files/figure-revealjs/unnamed-chunk-14-1.png){width=576}\n:::\n:::\n\n## Boolean Overlays\n\n* Which types of land are appropriate?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-slides_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## Boolean Overlays\n\n* Make sure data is aligned!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuit.slope <- slope < 10\nsuit.landcov <- nlcd.segments[\"Shrubland\"]\nsuit.slope.match <- project(suit.slope, suit.landcov)\nsuit <- suit.slope.match + suit.landcov\n```\n:::\n\n## Boolean Overlays\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-slides_files/figure-revealjs/unnamed-chunk-17-1.png){width=576}\n:::\n:::\n\n\n## Challenges with Boolean Overlays\n\n1. Assume relationships are really Boolean\n\n2. No measurement error\n\n3. Categorical measurements are known exactly\n\n4. Boundaries are well-represented\n\n## A more general approach\n\n* Define a _favorability_ metric\n\n$$\n\\begin{equation}\nF(\\mathbf{s}) = \\prod_{M=1}^{m}X_m(\\mathbf{s})\n\\end{equation}\n$$\n\n## Weighted Linear Combinations\n\n$$\n\\begin{equation}\nF(\\mathbf{s}) = \\frac{\\sum_{M=1}^{m}w_mX_m}{\\sum_{M=1}^{m}w_i}\n\\end{equation}\n$$",
    "supporting": [
      "18-slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}