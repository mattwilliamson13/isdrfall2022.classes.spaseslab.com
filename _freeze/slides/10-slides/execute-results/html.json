{
  "hash": "f56ca234f572e56e79044a5155f967e8",
  "result": {
    "markdown": "---\ntitle: \"Introduction to Mapping Geographic Data\"\nsubtitle: \"HES 505 Fall 2023: Session 10\"\nauthor: \"Matt Williamson\"\nformat: \n  revealjs:\n    theme: mytheme.scss\n    slide-number: true\n    show-slide-number: print\n    self-contained: true  \n---\n\n\n# Today's Plan {background=\"#43464B\" background-image=\"img/slide_10/NEDUS.gif\" background-opacity=\"0.7\"}\n\n::: footer\nImage Source: USGS\n:::\n\n## Objectives\n\n- By the end of today, you should be able to:\n\n*   Describe the basic components of data visualization as a foundation for mapping syntax\n\n*   Understand layering in both base `plot` and `tmap`\n\n*   Make basic plots of multiple spatial data objects\n  \n# Using `plot` {background=\"#9F281A\"}\n\n## Which packages have `plot` methods?\n\n::: columns\n::: {.column width=\"40%\"}\n* Often the fastest way to view data\n\n* Use `?plot` to see which packages export a method for the `plot` function\n\n* Or you can use `?plot.***` to see which classes of objects have plot functions defined\n\n:::\n::: {.column width=\"60%\"}\n![](img/slide_10/plotfuns.png)\n:::\n:::\n\n## `plot` for `sf` objects\n\n* Can plot outlines using `plot(st_geometry(your.shapfile))` or `plot(your.shapefile$geometry)`\n\n* Plotting attributes requires \"extracting\" the attributes (using `plot(your.shapefile[\"ATTRIBUTE\"])`)\n\n* Controlling aesthetics can be challenging\n\n* layering requires `add=TRUE`\n\n## `plot` for `sf` objects\n\n\n::: {.cell}\n\n:::\n\n\n::: columns\n:::{.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(cejst))\n```\n\n::: {.cell-output-display}\n![](10-slides_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n:::\n:::{.column width=\"50%}\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cejst[\"EALR_PFS\"])\n```\n\n::: {.cell-output-display}\n![](10-slides_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## `plot` for `SpatRasters`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(rast.data)\n```\n\n::: {.cell-output-display}\n![](10-slides_files/figure-revealjs/unnamed-chunk-4-1.png){width=1152}\n:::\n:::\n\n\n## `plot` for `SpatRasters`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(rast.data[\"WHP_ID\"], col=heat.colors(24, rev=TRUE))\n```\n\n::: {.cell-output-display}\n![](10-slides_files/figure-revealjs/unnamed-chunk-5-1.png){width=1152}\n:::\n:::\n\n\n## Combining the two with `add=TRUE`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(rast.data[\"WHP_ID\"], col=heat.colors(24, rev=TRUE))\nplot(st_geometry(st_transform(cejst, crs=crs(rast.data))), add=TRUE)\n```\n\n::: {.cell-output-display}\n![](10-slides_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n# Thinking about map construction {background=\"#9F281A\"}\n\n## Grammar of Graphics (Wilkinson 2005)\n\n- _Grammar_: A set of structural rules that help establish the components of a language\n\n- System and structure of language consist of _syntax_ and _semantics_\n\n- _Grammar of Graphics_: a framework that allows us to concisely describe the components of any graphic\n\n- Follows a layered approach by using defined components to build a visualization\n\n- `ggplot2` is a formal implementation in `R`\n\n\n#\n![](img/slide_10/gg_pyramid.png)\n\n\n\n## Aesthetics: Mapping Data to Visual Elements\n\n::: columns\n::: {.column width=\"40%\"}\n::: {style=\"font-size: 0.7em\"}\n- Define the systematic conversion of data into elements of the visualization\n\n- Are either categorical or continuous (exclusively)\n\n- Examples include `x`, `y`, `fill`, `color`, and `alpha`\n:::\n:::\n::: {.column width=\"60%\"}\n![From Wilke 2019](img/slide_10/tbl.png)\n:::\n:::\n\n## Scales\n\n- Scales map data values to their aesthetics\n\n- Must be a one-to-one relationship; each specific data value should map to only one aesthetic\n\n# Adding aesthetics with `tmap`{background=\"#9F281A\"}\n\n## Using `tmap`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(terra)\nlibrary(tmap)\npt <- tm_shape(cejst) + \n  tm_polygons(col = \"EALR_PFS\",\n              border.col = \"white\") + \n  tm_legend(outside = TRUE)\n```\n:::\n\n\n## Using `tmap`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-slides_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## Changing aesthetics\n\n\n::: {.cell}\n\n```{.r .cell-code}\npt <- tm_shape(cejst) + \n  tm_polygons(col = \"EALR_PFS\", n=10,palette=viridis(10),\n              border.col = \"white\") + \n  tm_legend(outside = TRUE)\n```\n:::\n\n\n## Changing aesthetics\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-slides_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## Adding layers\n\n**ORDER MATTERS**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst <- tigris::states(progress_bar=FALSE) %>% filter(STUSPS %in% c(\"ID\", \"WA\", \"OR\")) %>% st_transform(., crs = st_crs(cejst))\npt <- tm_shape(cejst) + \n  tm_polygons(col = \"EALR_PFS\", n=10,palette=viridis(10),\n              border.col = \"white\") + \n  tm_shape(st) +\n  tm_borders(\"red\") +\n  tm_legend(outside = TRUE)\n```\n:::\n\n\n## Adding layers\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-slides_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Integrating Rasters \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncejst.proj <- st_transform(cejst, crs=crs(rast.data)) %>% filter(!st_is_empty(.))\nstates.proj <- st_transform(st, crs=crs(rast.data))\npal8 <- c(\"#33A02C\", \"#B2DF8A\", \"#FDBF6F\", \"#1F78B4\", \"#999999\", \"#E31A1C\", \"#E6E6E6\", \"#A6CEE3\")\npt <- tm_shape(rast.data[\"category\"]) +\n  tm_raster(palette = pal8) +\n  tm_shape(cejst.proj) + \n  tm_polygons(col = \"EALR_PFS\", n=10,palette=viridis(10),\n              border.col = \"white\") + \n  tm_shape(states.proj) +\n  tm_borders(\"red\") +\n  tm_legend(outside = TRUE)\n```\n:::\n\n\n## Integrating Rasters \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-slides_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::",
    "supporting": [
      "10-slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}