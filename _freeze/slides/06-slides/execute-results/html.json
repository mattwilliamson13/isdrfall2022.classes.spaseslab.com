{
  "hash": "bd291fd934178771d9699573fadd8114",
  "result": {
    "markdown": "---\ntitle: \"Literate Programming, Quarto, and Workflows\"\nsubtitle: \"HES 505 Fall 2023: Session 6\"\nauthor: \"Matt Williamson\"\nformat: \n  revealjs:\n    theme: mytheme.scss\n    slide-number: true\n    show-slide-number: print\n    self-contained: true  \n---\n\n\n## For today\n\n1. Introduce literate programming\n\n2. Describe pseudocode and its utility for designing an analysis\n\n3. Introduce `Quarto` as a means of documenting your work\n\n4. Practice workflow\n\n# Reproducibility\n\n#\n\n> Science is a social process!!\n\n## Why Do We Need Reproducibility?\n\n::: columns\n::: {.column width=\"30%\"}\n\n- Noise!!\n\n- Confirmation bias\n\n- Hindsight bias\n:::\n::: {.column width=\"70%\"}\n![Munafo et al. 2017. Nat Hum Beh.](img/slide_6/Munafo_et_al_nathumbeh2017.png)\n:::\n:::\n\n## Reproducibility and your code\n\n- Scripts: may make your code reproducible (but not your analysis)\n\n- Commenting and [formatting](https://style.tidyverse.org/index.html) can help!\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: false\n## load the packages necessary\nlibrary(tidyverse)\n## read in the data\nlandmarks.csv <- read_csv(\"/Users/mattwilliamson/Google Drive/My Drive/TEACHING/Intro_Spatial_Data_R/Data/2023/assignment01/landmarks_ID.csv\")\n\n## How many in each feature class\ntable(landmarks.csv$MTFCC)\n```\n````\n:::\n\n\n## Reproducible scripts\n\n- Comments explain what the code is doing\n\n- Operations are ordered logically\n\n- Only relevant commands are presented\n\n- Useful object and function names\n\n- Script runs without errors (on your machine and someone else's)\n\n# Literate Programming {background=\"#9F281A\"}\n\n## Toward Efficient Reproducible Analyses\n\n- Scripts can document what you did, but not why you did it!\n\n- Scripts separate your analysis products from your report/manuscript\n\n## \n\n{{< video https://www.youtube.com/watch?v=s3JldKoA0zw width=\"100%\" height=\"100%\" >}}\n\n\n\n## What is literate programming?\n\n>Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.\n<footer>--- Donald Knuth, CSLI, 1984</footer>\n\n## What is literate programming?\n\n- Documentation containing code (not vice versa!)\n\n- Direct connection between code and explanation\n\n- Convey meaning to humans rather than telling computer what to do!\n\n- Multiple \"scales\" possible\n\n## Why literate programming?\n\n- Your analysis scripts **are** computer software\n\n- Integrate math, figures, code, and narrative in one place\n\n- Explaining something helps you learn it\n\n## Planning an analysis\n\n::: columns\n::: {.column width=\"35%\"}\n- Outline your project\n\n- Write pseudocode\n\n- Identify potential packages\n\n- Borrow (and attribute) code from others (including yourself!)\n:::\n::: {.column width=\"65%\"}\n\n![](img/slide_6/tast_view.png)\n\n:::\n:::\n\n# Pseudocode {background=\"#9F281A\"}\n\n## Pseudocode and literate programming\n\n- An informal way of writing the 'logic' of your program\n\n- Balance between readability and precision\n\n- Avoid _syntactic drift_ \n\n## Writing pseudocode\n::: columns\n::: {.column width=\"40%\"}\n- Focus on statements\n- Mathematical operations\n- Conditionals\n- Iteration\n- Exceptions\n:::\n::: {.column width=\"60%\"}\n![](img/slide_6/keywords.png)\n:::\n:::\n\n## Pseudocode\n\n\n::: {.cell}\n\n```{.r .cell-code}\nStart function\nInput information\nLogical test: if TRUE\n  (what to do if TRUE)\nelse\n  (what to do if FALSE)\nEnd function\n```\n:::\n\n\n\n# Introducing Quarto {background=\"#9F281A\"}\n\n## What is Quarto?\n\n- A multi-language platform for developing reproducible documents\n\n- A 'lab notebook' for your analyses\n\n- Allows transparent, reproducible scientific reports and presentations\n\n## Key components\n\n1. Metadata and global options: YAML\n\n2. Text, figures, and tables: Markdown and LaTeX\n\n3. Code: `knitr` (or `jupyter` if you're into that sort of thing)\n\n## YAML - Yet Another Markup Language\n\n1. Allows you to set (or change) output format\n\n2. Provide options that apply to the entire document\n\n3. Spacing matters!\n\n![](img/slide_6/yaml_ex.png)\n\n## Formatting Text\n\n- Basic formatting via Markdown\n\n- Fancier options using [Divs and spans](https://pandoc.org/MANUAL.html#divs-and-spans) via Pandoc\n\n- Fenced Divs start and end with `:::` (can be any number `>3` but must match)\n\n## Adding Code Chunks\n\n- Use 3x ` ``` ` on each end\n\n- Include the engine `{r}` (or python or Julia)\n\n- Include options beneath the \"fence\" using a hashpipe (`#|`)\n\n![](img/slide_6/cod_chunk.png)\n\n# Let's Try It!! {background=\"#9F281A\"}\n\n## Additional considerations\n\n- File locations and Quarto\n\n- Caching for slow operations\n\n- Modularizing code and functional programming",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}