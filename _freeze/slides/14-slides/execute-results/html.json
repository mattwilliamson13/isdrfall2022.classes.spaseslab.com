{
  "hash": "75dae0846750b9dffe453b206fa73d0b",
  "result": {
    "markdown": "---\ntitle: \"Raster Data: II\"\nsubtitle: \"HES 505 Fall 2023: Session 14\"\nauthor: \"Matt Williamson\"\nformat: \n  revealjs:\n    theme: mytheme.scss\n    slide-number: true\n    show-slide-number: print\n    self-contained: true  \n---\n\n\n# Today's Plan {background=\"#43464B\" background-image=\"img/slide_14/bison.png\"}\n\n\n## Objectives\n\n- By the end of today, you should be able to:\n\n  * Use moving windows as a means of smoothing raster data\n\n  * Reclassify data using conditional statements and reclassification tables\n\n  * Use raster math as a means of creating new data based on an existing dataset.\n\n# Moving Windows\n\n## Why use moving windows?\n\n  * To create new data that reflects \"neighborhood\" data\n  \n  * To smooth out values\n  \n  * To detect (and fill) holes or edges\n  \n  * Change the thematic scale of your data (without changing resolution)\n  \n## What is a moving window?\n\n![](img/slide_14/raster_sliding_window.jpg)\n\n## Implementing Moving Windows in `R`\n\n- Use the `focal` function in `terra`\n\n`focal(x, w=3, fun=\"sum\", ..., na.policy=\"all\", fillvalue=NA, \n\t\texpand=FALSE, silent=TRUE, filename=\"\", overwrite=FALSE, wopt=list()) `\n\n## `focal` for Continuous Rasters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(spData)\nsrtm = rast(system.file(\"raster/srtm.tif\", package = \"spDataLarge\"))\nsrtm3  <-  focal(x = srtm, w = 3)\nsrtm9  <-  focal(x = srtm, w = 9)\nsrtm21  <-  focal(x = srtm, w = 21)\n```\n:::\n\n\n## `focal` for Continuous Rasters\n\n::: {.cell}\n::: {.cell-output-display}\n![](14-slides_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## `focal` for Continuous Rasters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsrtmsum  <-  focal(x = srtm, w = 3, fun=\"sum\")\nsrtmmax  <-  focal(x = srtm, w = 9, fun=\"mean\")\nsrtmmin  <-  focal(x = srtm, w = 21, fun=\"min\")\n```\n:::\n\n\n## `focal` for Continuous Rasters\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](14-slides_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## `focal` for Continous Rasters\n\n* can alter the size and shape of window by providing a weights matrix for `w`\n\n* Can create different custom functions for `fun` (see the help file)\n\n* `na.policy` for filling holes or avoiding them\n\n# Reclassification\n\n## Reclassification\n\n* Create new data based on the presence of a particular class(es) of interest\n\n* Combine classes in a categorical map\n\n* Useful as inputs for overlay analyses\n\n## Reclassifying rasters in `R`\n\n* Using `[]` and conditionals\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsrtm = rast(system.file(\"raster/srtm.tif\", package = \"spDataLarge\"))\nsrtm.lowelev <- srtm\nsrtm.lowelev[srtm.lowelev > 2500] <- 1\nplot(srtm.lowelev)\n```\n\n::: {.cell-output-display}\n![](14-slides_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Reclassifying rasters in `R`\n\n* Using `[]` and conditionals\n\n::: {.cell}\n\n```{.r .cell-code}\nsrtm = rast(system.file(\"raster/srtm.tif\", package = \"spDataLarge\"))\n\n\nsrtm.na <- srtm\nsrtm.na[200:300, 200:300] <- NA\nsrtm.na[is.na(srtm.na)] <- 8000\nplot(srtm.na)\n```\n\n::: {.cell-output-display}\n![](14-slides_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n## Reclassifying Categorical Rasters\n\n* Need a classification matrix\n* Use `classify`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmintemp <- rast(\"ftp://ftp.hafro.is/pub/data/rasters/Iceland_minbtemp.tif\")\ncm <- matrix(c(\n  -2, 2, 0,\n  2, 4, 1,\n  4, 10, 2), ncol = 3, byrow = TRUE)\n\n# Create a raster with integers\ntemp_reclass <- classify(mintemp, cm)\ntempcats <- c(\"cold\", \"mild\", \"warm\")\nlevels(temp_reclass) <- tempcats\n```\n:::\n\n\n## Reclassifying Categorical Rasters\n\n::: {.cell}\n::: {.cell-output-display}\n![](14-slides_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## Raster Math\n\n* Performs cell-wise calculations on 1 (or more) `SpatRasters`\n* Generally works the same as matrix operations \n* All layers must be aligned\n\n## Raster Math\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- rast(ncol=5, nrow=5)\nvalues(r) <- 1:ncell(r)\nr2 <- r*2\nr3 <- t(r)\nr4 <- r + r2\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](14-slides_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## Cell-wise operations\n\n* `terra` has a special set of `apply` functions\n\n* `app`, `lapp`, `tapp`\n\n* `app` applies a function to the values of each cell\n\n* `lapp` applies a function using the layer as the value\n\n* `tapp` applies the function to a subset of layers\n\n\n## Context-specific Functions\n\n* `distance` and relatives are based on relationships between cells\n\n* `terrain` allows calculation of slope, ruggedness, aspect using elevation rasters\n\n* `shade` calculates hillshade based on terrain",
    "supporting": [
      "14-slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}